import { countries, getEmojiFlag } from 'countries-list';

const prioritizedCountries = {
  USD: 'üá∫üá∏', // –°–®–ê
  EUR: 'üá™üá∫', // –ï–≤—Ä–æ—Å–æ—é–∑
  GBP: 'üá¨üáß', // –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è
  CHF: 'üá®üá≠', // –®–≤–µ–π—Ü–∞—Ä–∏—è
  PLN: 'üáµüá±', // –ü–æ–ª—å—à–∞
  ILS: 'üáÆüá±', // –ò–∑—Ä–∞–∏–ª—å
  CNY: 'üá®üá≥', // –ö–∏—Ç–∞–π
  TRY: 'üáπüá∑', // –¢—É—Ä—Ü–∏—è
  CAD: 'üá®üá¶', // –ö–∞–Ω–∞–¥–∞
  AUD: 'üá¶üá∫', // –ê–≤—Å—Ç—Ä–∞–ª–∏—è
  SEK: 'üá∏üá™', // –®–≤–µ—Ü–∏—è
  CZK: 'üá®üáø', // –ß–µ—Ö–∏—è
  HUF: 'üá≠üá∫', // –í–µ–Ω–≥—Ä–∏—è
  AED: 'üá¶üá™', // –û–ê–≠
  HKD: 'üá≠üá∞', // –ì–æ–Ω–∫–æ–Ω–≥
  UAH: 'üá∫üá¶', // –£–∫—Ä–∞–∏–Ω–∞
};

// 1. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –º–∞—Å—Å–∏–≤–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–ª—é—Ç
export const getAllCurrencies = () => {
  const uniqueCurrencies = Object.keys(countries).reduce((acc, countryCode) => {
    const country = countries[countryCode];
    if (country.currency && Array.isArray(country.currency)) {
      country.currency.forEach((currency) => acc.add(currency));
    }
    return acc;
  }, new Set());

  return Array.from(uniqueCurrencies); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Set –≤ –º–∞—Å—Å–∏–≤
};

// 2. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ –ø–æ –≤–∞–ª—é—Ç–µ
export const getFlagByCurrency = (currency) => {
  if (prioritizedCountries[currency]) {
    return prioritizedCountries[currency];
  }

  for (const countryCode of Object.keys(countries)) {
    const country = countries[countryCode];
    if (country.currency && country.currency.includes(currency)) {
      return getEmojiFlag(countryCode);
    }
  }

  return null; // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
};

// 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç —Å —Ñ–ª–∞–≥–∞–º–∏
export const getAllCurrenciesWithFlags = () => {
  const currencyToCountries = {};

  Object.keys(countries).forEach((countryCode) => {
    const country = countries[countryCode];
    if (country.currency && Array.isArray(country.currency)) {
      country.currency.forEach((currency) => {
        if (!currencyToCountries[currency]) {
          currencyToCountries[currency] = [];
        }
        currencyToCountries[currency].push(getEmojiFlag(countryCode));
      });
    }
  });

  return Object.entries(currencyToCountries).map(([currency, flags]) => {
    const flag = prioritizedCountries[currency] || flags[0];
    return `${currency} ${flag}`;
  });
};

// 4. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–ª–∞–≥–æ–≤ —Å—Ç—Ä–∞–Ω
export const getAllFlags = () => {
  return Object.keys(countries).map((countryCode) => getEmojiFlag(countryCode));
};

// 5. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞–ª—é—Ç —É —Å—Ç—Ä–∞–Ω
export const getCountriesWithMultipleCurrencies = () => {
  return Object.keys(countries)
    .filter((countryCode) => {
      const country = countries[countryCode];
      return country.currency && country.currency.length > 1;
    })
    .map((countryCode) => ({
      countryCode,
      country: countries[countryCode],
      currencies: countries[countryCode].currency,
      name: countries[countryCode].name,
      flag: getEmojiFlag(countryCode),
    }));
};

// 6. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–∞–ª—é—Ç —Ç–æ–ª—å–∫–æ –∏–∑ prioritizedCountries
export const getAllCurrenciesFromPrioritizedCountries = () => {
  return Object.keys(prioritizedCountries);
};

// // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// const allCurrencies = getAllCurrencies();
// console.log('All Currencies:', allCurrencies, countries);
//
// const usdFlag = getFlagByCurrency('USD');
// console.log('Flag for USD:', usdFlag);
//
// const allCurrenciesWithFlags = getAllCurrenciesWithFlags();
// console.log('Currencies with Flags:', allCurrenciesWithFlags);
//
// const allFlags = getAllFlags();
// console.log('All Flags:', allFlags);
//
// const countriesWithMultipleCurrencies = getCountriesWithMultipleCurrencies();
// console.log('Countries with Multiple Currencies:', countriesWithMultipleCurrencies);

export function formatDateTime(date = new Date(), includeTime = true) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');

  if (includeTime) {
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    // const seconds = String(date.getSeconds()).padStart(2, '0');
    return `${year}-${month}-${day}(${hours}:${minutes})`;
  }

  return `${year}-${month}-${day}`;
}

// // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
// console.log(formatDateTime()); // –í–∫–ª—é—á–∞–µ—Ç –≤—Ä–µ–º—è
// console.log(formatDateTime(new Date(), false)); // –ë–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
// console.log(formatDateTime(new Date('2024-06-13T08:02:00Z'), true)); // –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
// console.log(formatDateTime(new Date('2024-06-13T08:02:00Z'), false)); // –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
